/* Automatically generated nanopb header */
/* Generated by nanopb-1.0.0-dev */

#ifndef PB_CONTROLLERDATA_PB_H_INCLUDED
#define PB_CONTROLLERDATA_PB_H_INCLUDED
#include <pb.h>
#include "Joystick.pb.h"
#include "Buttons.pb.h"
#include "Modes.pb.h"

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Struct definitions */
typedef struct _ControllerData {
    bool has_leftJoystick;
    Joystick leftJoystick;
    bool has_rightJoystick;
    Joystick rightJoystick;
    bool has_buttons;
    Buttons buttons;
    Modes selectedMode;
    int32_t fixedSpeed;
} ControllerData;


#ifdef __cplusplus
extern "C" {
#endif

/* Initializer values for message structs */
#define ControllerData_init_default              {false, Joystick_init_default, false, Joystick_init_default, false, Buttons_init_default, _Modes_MIN, 0}
#define ControllerData_init_zero                 {false, Joystick_init_zero, false, Joystick_init_zero, false, Buttons_init_zero, _Modes_MIN, 0}

/* Field tags (for use in manual encoding/decoding) */
#define ControllerData_leftJoystick_tag          1
#define ControllerData_rightJoystick_tag         2
#define ControllerData_buttons_tag               3
#define ControllerData_selectedMode_tag          4
#define ControllerData_fixedSpeed_tag            5

/* Struct field encoding specification for nanopb */
#define ControllerData_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, MESSAGE,  leftJoystick,      1) \
X(a, STATIC,   OPTIONAL, MESSAGE,  rightJoystick,     2) \
X(a, STATIC,   OPTIONAL, MESSAGE,  buttons,           3) \
X(a, STATIC,   SINGULAR, UENUM,    selectedMode,      4) \
X(a, STATIC,   SINGULAR, SINT32,   fixedSpeed,        5)
#define ControllerData_CALLBACK NULL
#define ControllerData_DEFAULT NULL
#define ControllerData_leftJoystick_MSGTYPE Joystick
#define ControllerData_rightJoystick_MSGTYPE Joystick
#define ControllerData_buttons_MSGTYPE Buttons

extern const pb_msgdesc_t ControllerData_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define ControllerData_fields &ControllerData_msg

/* Maximum encoded size of messages (where known) */
#define CONTROLLERDATA_PB_H_MAX_SIZE             ControllerData_size
#define ControllerData_size                      50

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
